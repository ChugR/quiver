#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys
import time

from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

home_dir = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home_dir, "python"))

from quiver import *

class Handler(MessagingHandler):
    def __init__(self, **kwargs):
        super(Handler, self).__init__(**kwargs)

        self.connection_mode = None
        self.channel_mode = None
        self.operation = None
        self.host = None
        self.port = None
        self.path = None
        self.messages = None
        self.bytes_ = None

        self.listener = None
        self.body = None

        self.sent = 0
        self.received = 0
        self.accepted = 0

    def on_start(self, event):
        domain = "{}:{}".format(self.host, self.port)

        if self.connection_mode == "client":
            event.container.connect(domain, allowed_mechs=b"ANONYMOUS")
        elif self.connection_mode == "server":
            self.listener = event.container.listen(domain)
        else:
            raise Exception()
        
        self.body = b"x" * self.bytes_
        
    def on_connection_opened(self, event):
        if self.channel_mode == "active":
            if self.operation == "send":
                event.container.create_sender(event.connection, self.path)
            elif self.operation == "receive":
                event.container.create_receiver(event.connection, self.path)
            else:
                raise Exception()
            
    def on_sendable(self, event):
        while event.sender.credit > 0 and self.sent < self.messages:
            id = self.sent + 1
            stime = long(round(time.time()) * 1000)
            
            message = Message(self.body)
            message.id = id
            message.properties = dict() # XXX Obnoxious
            message.properties["SendTime"] = stime

            event.sender.send(message)

            sys.stdout.write("{},{}\n".format(id, stime))
        
            self.sent += 1
            
    def on_accepted(self, event):
        self.accepted += 1
                
        if self.accepted == self.messages:
            event.connection.close()

            if self.connection_mode == "server":
                self.listener.close()

    def on_message(self, event):
        if self.received == self.messages:
            return

        message = event.message
        rtime = long(round(time.time() * 1000))
        stime = event.message.properties["SendTime"]
        
        sys.stdout.write("{},{},{}\n".format(message.id, stime, rtime))

        self.received += 1

        if self.received == self.messages:
            event.connection.close()

            if self.connection_mode == "server":
                self.listener.close()

def main():
    credit = int(sys.argv[10])

    handler = Handler(prefetch=credit)
    handler.connection_mode = sys.argv[1]
    handler.channel_mode = sys.argv[2]
    handler.operation = sys.argv[3]
    handler.host = sys.argv[5]
    handler.port = sys.argv[6]
    handler.path = sys.argv[7]
    handler.messages = int(sys.argv[8])
    handler.bytes_ = int(sys.argv[9])

    if handler.port == "-":
        handler.port = "5672"
    
    container = Container(handler)
    container.container_id = sys.argv[4]

    container.run()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
