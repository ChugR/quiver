#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys
import time

from qpid_messaging import *

default_home_dir = os.path.normpath("@quiver_home@")
home_dir = os.environ.get("QUIVER_HOME", default_home_dir)

sys.path.insert(0, os.path.join(home_dir, "python"))

class Client(object):
    def __init__(self):
        self.output_dir = None
        self.domain = None
        self.path = None
        self.operation = None
        self.messages = None
        self.bytes_ = None
        self.credit = None
        
        self.transfers = 0

    def run(self):
        conn = Connection(self.domain, protocol=b"amqp1.0",
                          sasl_mechanisms=b"ANONYMOUS")
        conn.open()

        try:
            session = conn.session()

            if self.operation == "send":
                self.send_messages(session)
            elif self.operation == "receive":
                self.receive_messages(session)
            else:
                raise Exception()
        finally:
            conn.close()

    def send_messages(self, session):
        sender = session.sender(self.path)
        sender.capacity = self.credit

        body = b"x" * self.bytes_
        
        while self.transfers < self.messages:
            message = Message(body)
            message.id = str(self.transfers + 1)
            message.properties[b"SendTime"] = long(round(time.time() * 1000))

            sender.send(message)
        
            self.transfers +=1
        
    def receive_messages(self, session):
        receiver = session.receiver(self.path)
        receiver.capacity = self.credit

        while self.transfers < self.messages:
            if receiver.available() == 0:
                continue
        
            message = receiver.get()

            session.acknowledge()

            stime = message.properties["SendTime"]
            rtime = long(round(time.time() * 1000))
            record = "{},{},{}\n".format(message.id, stime, rtime)

            sys.stdout.write(record)
            
            self.transfers +=1

def main():
    if sys.argv[2] != "client":
        raise Exception("This impl supports client mode only")

    client = Client()
    client.output_dir = sys.argv[1]
    client.domain = sys.argv[3]
    client.path = sys.argv[4]
    client.operation = sys.argv[5]
    client.messages = int(sys.argv[6])
    client.bytes_ = int(sys.argv[7])
    client.credit = int(sys.argv[8])

    client.run()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
