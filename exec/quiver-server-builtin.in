#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

home = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home, "python"))

import collections as collections
import uuid as uuid

from argparse import ArgumentParser
from plano import *
from proton import *
from proton.handlers import *
from proton.reactor import *
from quiver.common import *

class Queue(object):
    def __init__(self, address):
        self.address = address

        self.messages = collections.deque()
        self.consumers = list()

        notice("Creating {}", self)

    def __repr__(self):
        return "queue '{}'".format(self.address)

    def add_consumer(self, link):
        assert link.is_sender
        assert link not in self.consumers

        notice("Adding consumer for '{}' to {}", link.connection.remote_container, self)

        self.consumers.append(link)

    def remove_consumer(self, link):
        assert link.is_sender

        notice("Removing consumer for '{}' from {}", link.connection.remote_container, self)

        try:
            self.consumers.remove(link)
        except ValueError:
            pass

    def store_message(self, message):
        self.messages.append(message)

    def forward_messages(self, link):
        assert link.is_sender

        while link.credit > 0:
            try:
                message = self.messages.popleft()
            except IndexError:
                break

            link.send(message)

class BrokerHandler(MessagingHandler):
    def __init__(self, domain, ready_file):
        super(BrokerHandler, self).__init__()

        self.domain = domain
        self.ready_file = ready_file
        self.verbose = False

        self.queues = dict()

    def on_start(self, event):
        event.container.listen(self.domain)

        notice("Listening on '{}'", self.domain)

        if self.ready_file != "-":
            write(self.ready_file, "ready\n")

    def get_queue(self, address):
        try:
            queue = self.queues[address]
        except KeyError:
            queue = self.queues[address] = Queue(address)

        return queue

    def on_link_opening(self, event):
        # XXX check that address matches config

        if event.link.is_sender:
            if event.link.remote_source.dynamic:
                address = str(uuid.uuid4())
            else:
                address = event.link.remote_source.address

            assert address is not None

            event.link.source.address = address

            queue = self.get_queue(address)
            queue.add_consumer(event.link)

        if event.link.is_receiver:
            address = event.link.remote_target.address

            assert address is not None

            event.link.target.address = address

    def on_link_closing(self, event):
        if event.link.is_sender:
            queue = self.queues[link.source.address]
            queue.remove_consumer(link)

    def on_connection_opening(self, event):
        notice("Opening connection from '{}'", event.connection.remote_container)

        # XXX I think this should happen automatically
        event.connection.container = event.container.container_id

    def on_connection_closing(self, event):
        notice("Closing connection from '{}'", event.connection.remote_container)

        self.remove_consumers(event.connection)

    def on_disconnected(self, event):
        notice("Disconnected from {}", event.connection.remote_container)

        self.remove_consumers(event.connection)

    def remove_consumers(self, connection):
        link = connection.link_head(Endpoint.REMOTE_ACTIVE)

        while link is not None:
            if link.is_sender:
                queue = self.queues[link.source.address]
                queue.remove_consumer(link)

            link = link.next(Endpoint.REMOTE_ACTIVE)

    def on_sendable(self, event):
        queue = self.get_queue(event.link.source.address)
        queue.forward_messages(event.link)

    def on_message(self, event):
        queue = self.get_queue(event.link.target.address)
        queue.store_message(event.message)

        for link in queue.consumers:
            queue.forward_messages(link)

def main():
    host = sys.argv[1]
    port = sys.argv[2]
    path = sys.argv[3]
    ready_file = sys.argv[4]

    if port == "-":
        port = "5672"

    domain = "{}:{}".format(host, port)

    handler = BrokerHandler(domain, ready_file)
    handler.verbose = True # XXX

    container = Container(handler)
    container.container_id = "quiver-server-builtin"

    container.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
