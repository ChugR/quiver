#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

default_home_dir = os.path.normpath("@quiver_home@")
home_dir = os.environ.get("QUIVER_HOME", default_home_dir)

sys.path.insert(0, os.path.join(home_dir, "python"))

import time

from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    
class BaseHandler(MessagingHandler):
    def __init__(self, **kwargs):
        super(BaseHandler, self).__init__(**kwargs)

        self.output_dir = None
        self.operation = None
        self.domain = None
        self.path = None
        self.messages = None
        self.bytes_ = None
        self.timeout = None

        self.transfers = 0
        self.checkpoint = None # timestamp, transfers
        self.timer_task = None
        self.stopping = False

    def on_start(self, event):
        self.checkpoint = time.time(), self.transfers
        self.timer_task = event.container.schedule(1.0, self)
        
    def stop(self):
        self.stopping = True
        self.timer_task.cancel()

    def on_timer_task(self, event):
        now = time.time()
        then, transfers_then = self.checkpoint

        if self.transfers == transfers_then and now - then > self.timeout:
            raise Exception("Timeout!")

        if self.transfers > transfers_then:
            then = now
            
        self.checkpoint = then, self.transfers
        self.timer_task = event.container.schedule(1.0, self)

    def on_sendable(self, event):
        if self.stopping:
            return

        while event.sender.credit > 0:
            message = Message(b"x" * self.bytes_)
            message.id = self.transfers + 1
            message.properties = dict()
            message.properties["SendTime"] = time.time()

            event.sender.send(message)

            self.transfers += 1
            
            if self.transfers == self.messages:
                self.stop()

    def on_message(self, event):
        if self.stopping:
            return

        message = event.message
        rtime = time.time()
        stime = event.message.properties["SendTime"]
        record = "{},{:.9f},{:.9f}\r\n".format(message.id, stime, rtime)
        
        sys.stdout.write(record)

        self.transfers += 1

        if self.transfers == self.messages:
            self.stop()

class Client(BaseHandler):
    def __init__(self, **kwargs):
        super(Client, self).__init__(**kwargs)

        self.connection = None

    def on_start(self, event):
        super(Client, self).on_start(event)
        
        self.connection = event.container.connect \
            (self.domain, allowed_mechs=b"ANONYMOUS")

        if self.operation == "send":
            event.container.create_sender(self.connection, self.path)

        if self.operation == "receive":
            event.container.create_receiver(self.connection, self.path)
            
    def stop(self):
        super(Client, self).stop()
        
        self.connection.close()

class Server(BaseHandler):
    def __init__(self, **kwargs):
        super(Server, self).__init__(**kwargs)
        
        self.acceptor = None

    def on_start(self, event):
        super(Server, self).on_start(event)

        self.acceptor = event.container.listen(self.domain)

    def stop(self):
        super(Server, self).stop()
        
        self.acceptor.close()

def main():
    output_dir, mode, operation, domain, path = sys.argv[1:6]
    messages, bytes_, credit, timeout = map(int, sys.argv[6:10])

    if mode == "client":
        handler = Client(prefetch=credit)
    
    if mode == "server":
        handler = Server(prefetch=credit)

    handler.output_dir = output_dir
    handler.operation = operation
    handler.domain = domain
    handler.path = path
    handler.messages = messages
    handler.bytes_ = bytes_
    handler.timeout = timeout
        
    container = Container(handler)
    container.run()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
