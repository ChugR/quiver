#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys
import time

from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

home_dir = os.path.normpath("@quiver_home@")

class BaseHandler(MessagingHandler):
    def __init__(self, **kwargs):
        super(BaseHandler, self).__init__(**kwargs)

        self.output_dir = None
        self.domain = None
        self.path = None
        self.operation = None
        self.messages = None
        self.bytes_ = None

        self.body = None

        self.sent = 0
        self.accepted = 0
        self.received = 0

    def init(self):
        self.body = b"x" * self.bytes_
        
    def stop(self):
        raise NotImplementedError()

    def on_sendable(self, event):
        while event.sender.credit > 0 and self.sent < self.messages:
            id = self.sent + 1
            stime = long(round(time.time() * 1000))
            
            message = Message(self.body)
            message.id = id
            message.properties = dict() # XXX Obnoxious
            message.properties["SendTime"] = stime

            event.sender.send(message)

            sys.stdout.write("{},{}\n".format(id, stime))
        
            self.sent += 1
            
    def on_accepted(self, event):
        self.accepted += 1
                
        if self.accepted == self.messages:
            self.stop()

    def on_message(self, event):
        if self.received == self.messages:
            return

        message = event.message
        rtime = long(round(time.time() * 1000))
        stime = event.message.properties["SendTime"]
        
        sys.stdout.write("{},{},{}\n".format(message.id, stime, rtime))

        self.received += 1

        if self.received == self.messages:
            sys.stdout.flush()
            self.stop()

class Client(BaseHandler):
    def __init__(self, **kwargs):
        super(Client, self).__init__(**kwargs)

        self.connection = None

    def on_start(self, event):
        super(Client, self).on_start(event)
        
        self.connection = event.container.connect \
            (self.domain, allowed_mechs=b"ANONYMOUS")

        if self.operation == "send":
            event.container.create_sender(self.connection, self.path)
        elif self.operation == "receive":
            event.container.create_receiver(self.connection, self.path)
        else:
            raise Exception()
            
    def stop(self):
        self.connection.close()

class Server(BaseHandler):
    def __init__(self, **kwargs):
        super(Server, self).__init__(**kwargs)
        
        self.acceptor = None

    def on_start(self, event):
        super(Server, self).on_start(event)

        self.acceptor = event.container.listen(self.domain)

    def on_connection_opened(self, event):
        if self.operation == "send":
            event.container.create_sender(event.connection, self.path)
        elif self.operation == "receive":
            pass
        else:
            raise Exception()

    def stop(self):
        self.acceptor.close()

def main():
    mode = sys.argv[2]
    credit = int(sys.argv[8])

    if mode == "client":
        handler = Client(prefetch=credit)
    elif mode == "server":
        handler = Server(prefetch=credit)
    else:
        raise Exception()

    handler.output_dir = sys.argv[1]
    handler.domain = sys.argv[3]
    handler.path = sys.argv[4]
    handler.operation = sys.argv[5]
    handler.messages = int(sys.argv[6])
    handler.bytes_ = int(sys.argv[7])

    handler.init()
    
    container = Container(handler)
    container.run()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
