#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

from qpid_messaging import *

home_dir = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home_dir, "python"))

from quiver import *

link_options = "{link: {durable: False, reliability: at-least-once}}"

class Client(object):
    def __init__(self):
        self.operation = None
        self.id_ = None
        self.host = None
        self.port = None
        self.path = None
        self.messages = None
        self.body_size = None
        self.credit_window = None

        self.sent = 0
        self.received = 0

    def run(self):
        domain = "{}:{}".format(self.host, self.port)
        conn = Connection(domain,
                          protocol=b"amqp1.0",
                          container_id=self.id_,
                          sasl_mechanisms=b"ANONYMOUS")

        conn.open()

        try:
            session = conn.session()

            if self.operation == "send":
                self.send_messages(session)
            elif self.operation == "receive":
                self.receive_messages(session)
            else:
                raise Exception()
        finally:
            conn.close()

    def send_messages(self, session):
        # XXX
        # NotImplementedError: Wrong number or type of arguments for overloaded function 'Session__sender'.
        #   Possible C/C++ prototypes are:
        #     qpid::messaging::Session::createSender(qpid::messaging::Address const &)
        #     qpid::messaging::Session::createSender(std::string const &)
        #address = "{}; {}".format(self.path, link_options)
        #sender = session.sender(address)
        sender = session.sender(self.path)
        sender.capacity = self.credit_window

        body = b"x" * self.body_size
        
        while self.sent < self.messages:
            id_ = str(self.sent + 1)
            stime = now()
            record = "{},{}\n".format(id_, stime)
            
            message = Message(body)
            message.id = id_
            message.properties[b"SendTime"] = stime
            
            sender.send(message)

            sys.stdout.write(record)
            
            self.sent +=1
        
    def receive_messages(self, session):
        # XXX See above
        #address = "{}; {}".format(self.path, link_options)
        #receiver = session.receiver(address)
        receiver = session.receiver(self.path)
        receiver.capacity = self.credit_window

        while self.received < self.messages:
            if receiver.available() == 0:
                continue
        
            message = receiver.get()
            session.acknowledge()

            stime = message.properties["SendTime"]
            rtime = now()
            record = "{},{},{}\n".format(message.id, stime, rtime)

            sys.stdout.write(record)
            
            self.received +=1

def main():
    if sys.argv[1] != "client":
        eprint("This impl supports client mode only")
        sys.exit(1)

    if sys.argv[2] != "active":
        eprint("This impl supports active mode only")
        sys.exit(1)

    client = Client()
    client.operation = sys.argv[3]
    client.id_ = sys.argv[4]
    client.host = sys.argv[5]
    client.port = sys.argv[6]
    client.path = sys.argv[7]
    client.messages = int(sys.argv[8])
    client.body_size = int(sys.argv[9])
    client.credit_window = int(sys.argv[10])

    if client.port == "-":
        client.port = "5672"
    
    client.run()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
