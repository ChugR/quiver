#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import shlex
import sys
import traceback

home = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home, "python"))

from plano import *

def main():
    set_message_output(sys.stdout)

    parser = argparse.ArgumentParser()

    parser.add_argument("url", metavar="URL",
                        help="The location of a message queue")
    parser.add_argument("--sender-count", metavar="COUNT", default=1, type=int)
    parser.add_argument("--sender-impl", metavar="IMPL", default="qpid-proton-python")
    parser.add_argument("--sender-options", metavar="OPTIONS", default="")
    parser.add_argument("--receiver-count", metavar="COUNT", default=1, type=int)
    parser.add_argument("--receiver-impl", metavar="IMPL", default="qpid-proton-python")
    parser.add_argument("--receiver-options", metavar="OPTIONS", default="")
    parser.add_argument("--init-only", action="store_true",
                        help="Initialize and immediately exit")

    args, unknown_args = parser.parse_known_args()

    sender_impl = args.sender_impl
    sender_options = shlex.split(args.sender_options)

    receiver_impl = args.receiver_impl
    receiver_options = shlex.split(args.receiver_options)

    sender_command = ["quiver-arrow", "send", args.url, "--impl", sender_impl]
    sender_command += sender_options
    sender_command += unknown_args

    receiver_command = ["quiver-arrow", "receive", args.url, "--impl", receiver_impl]
    receiver_command += receiver_options
    receiver_command += unknown_args

    exit_code = 0

    if args.init_only:
        return

    senders = list()
    receivers = list()

    for i in range(args.receivers):
        receiver = start_process(receiver_command)
        receivers.append(receiver)

    sleep(1) # XXX Use wait_for_port

    for i in range(args.senders):
        sender = start_process(sender_command)
        senders.append(sender)

    try:
        try:
            for sender in senders:
                wait_for_process(sender)

            for receiver in receivers:
                wait_for_process(receiver)
        except:
            for sender in senders:
                stop_process(sender)

            for receiver in receivers:
                stop_process(receiver)

            raise

        for sender in senders:
            if sender.returncode != 0:
                exit_code = 1
                break

        for receiver in receivers:
            if receiver.returncode != 0:
                exit_code = 1
                break
    except KeyboardInterrupt:
        pass
    except:
        traceback.print_exc()
        exit_code = 1
    finally:
        exit(exit_code)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
