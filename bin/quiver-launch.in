#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import subprocess
import sys
import time

default_home_dir = os.path.normpath("@quiver_home@")
home_dir = os.environ.get("QUIVER_HOME", default_home_dir)

sys.path.insert(0, os.path.join(home_dir, "python"))

from quiver import *

description = "Launch quiver senders and receivers\n" \
              "\n" \
              "Arguments not processed by quiver-launch are passed to\n" \
              "the 'quiver' command\n"

class Formatter(argparse.ArgumentDefaultsHelpFormatter,
                argparse.RawDescriptionHelpFormatter):
    pass

parser = argparse.ArgumentParser(description=description,
                                 formatter_class=Formatter)

parser.add_argument("address", metavar="ADDRESS",
                    help="The location of an AMQP node")
parser.add_argument("--pairs", metavar="COUNT",
                    help="Launch COUNT sender-receiver pairs",
                    default=1, type=int)
parser.add_argument("--senders", metavar="COUNT",
                    help="Launch COUNT senders",
                    default=1, type=int)
parser.add_argument("--receivers", metavar="COUNT",
                    help="Launch COUNT receivers",
                    default=1, type=int)

def main():
    args, passthrough_args = parser.parse_known_args()

    sender_count = max(args.pairs, args.senders)
    receiver_count = max(args.pairs, args.receivers)
    
    sender_args = ["quiver", args.address, "send"]
    sender_args += passthrough_args

    receiver_args = ["quiver", args.address, "receive"]
    receiver_args += passthrough_args

    senders = list()
    receivers = list()
    
    for i in range(sender_count):
        sender = subprocess.Popen(sender_args)
        senders.append(sender)

    time.sleep(0.1)

    for i in range(receiver_count):
        receiver = subprocess.Popen(receiver_args)
        receivers.append(receiver)

    for sender in senders:
        sender.wait()

    for receiver in receivers:
        receiver.wait()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
