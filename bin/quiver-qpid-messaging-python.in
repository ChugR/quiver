#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

default = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default)

sys.path.insert(0, os.path.join(home, "python"))

import time

from qpid_messaging import *

class Client(object):
    def __init__(self):
        self.output_dir = None
        self.domain = None
        self.path = None
        self.messages = None
        self.bytes_ = None
        self.credit = None
        self.timeout = None
        
        self.start_time = None
        self.batch_start_time = None
        self.transfer_count = 0
        self.transfer_records = list()
    
    def run(self):
        self.start_time = time.time()
        self.batch_start_time = self.start_time

        conn = Connection(self.domain, protocol=b"amqp1.0",
                          sasl_mechanisms=b"ANONYMOUS")
        conn.open()

        try:
            session = conn.session()

            link = self.create_link(session)
            link.capacity = self.credit

            while self.transfer_count < self.messages:
                self.transfer_message(link)
        finally:
            conn.close()

    def create_link(self, session):
        raise NotImplementedError()

    def transfer_message(self, link):
        raise NotImplementedError()

    def save(self):
        pass
                
class Sender(Client):
    def create_link(self, session):
        return session.sender(self.path)

    def transfer_message(self, link):
        message = Message(b"x" * self.bytes_)
        message.id = str(self.transfer_count + 1)
        message.properties[b"send-time"] = time.time()

        link.send(message)
        
        self.transfer_count +=1
        
class Receiver(Client):
    def create_link(self, session):
        return session.receiver(self.path)

    def transfer_message(self, link):
        if link.available() == 0:
            return
        
        message = link.get()

        link.session.acknowledge()

        send_time = message.properties["send-time"]
        receive_time = time.time()
        
        self.transfer_records.append((message.id, send_time, receive_time))
        
        self.transfer_count +=1
        
        if self.transfer_count % 10000 == 0:
            prev_time = self.batch_start_time
            curr_time = time.time()
            rate = int(round(10000 / (curr_time - prev_time)))
            
            print("* {:10,} {:8,} transfers/s".format(self.transfer_count, rate))

            self.batch_start_time = curr_time
            
    def save(self):
        transfers_file = os.path.join(self.output_dir, "transfers.csv")
        
        with open(transfers_file, "w") as f:
            for record in self.transfer_records:
                f.write("{},{:.9f},{:.9f}\r\n".format(*record))

def main():
    output_dir, mode, operation, domain, path = sys.argv[1:6]
    messages, bytes_, credit, timeout = map(int, sys.argv[6:10])

    if mode != "client":
        raise Exception("This implementation only supports client mode")

    if operation == "send":
        client = Sender()
        
    if operation == "receive":
        client = Receiver()

    client.output_dir = output_dir
    client.operation = operation
    client.domain = domain
    client.path = path
    client.messages = messages
    client.bytes_ = bytes_
    client.credit = credit
    client.timeout = timeout

    client.run()
    client.save()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
