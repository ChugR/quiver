#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

default = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default)

sys.path.insert(0, os.path.join(home, "python"))

import collections
import time
import uuid

from qpid_messaging import *

class Client(object):
    def __init__(self, work_dir, host_port, address, ntransfers,
                 nconnections, nsessions, nlinks):
        self.work_dir = work_dir
        self.host_port = host_port
        self.address = address
        self.ntransfers = ntransfers
        self.nconnections = nconnections
        self.nsessions = nsessions
        self.nlinks = nlinks

        self.connections = list()
        self.sessions = list()
        self.links = list()
        
        self.sessions_by_connection = collections.defaultdict(list)
        self.links_by_session = collections.defaultdict(list)
        
        self.start_time = None
        self.batch_start_time = None
        self.transfer_count = 0
        
    def run(self):
        self.start_time = time.time()
        self.batch_start_time = self.start_time
        
        for i in range(self.nconnections):
            conn = Connection(self.host_port, protocol=b"amqp1.0")
            conn.open()
            
            self.connections.append(conn)

        for i in range(self.nsessions):
            conn = self.connections[i % self.nconnections]
            session = conn.session()

            self.sessions.append(session)
            self.sessions_by_connection[conn].append(session)

        for i in range(self.nlinks):
            session = self.sessions[i % self.nsessions]
            name = "link-{}".format(i)

            link = self.create_link(session)
            link.capacity = 500
            
            self.links.append(link)
            self.links_by_session[session].append(link)

        while self.transfer_count < self.ntransfers:
            link = self.links[self.transfer_count % self.nlinks]
            self.transfer_message(link)
            
        for conn in self.connections:
            conn.close()

    def create_link(self, session):
        raise NotImplementedError()

    def transfer_message(self, link):
        raise NotImplementedError()

    def save(self):
        pass
                
class Sender(Client):
    def __init__(self, work_dir, host_port, address, ntransfers,
                 nconnections, nsessions, nlinks):
        super(Sender, self).__init__(work_dir, host_port, address, ntransfers,
                                     nconnections, nsessions, nlinks)

        self.message = Message("x" * 1000)
        
    def create_link(self, session):
        return session.sender(self.address)

    def transfer_message(self, link):
        self.message.id = str(self.transfer_count + 1)
        self.message.properties[b"send-time"] = time.time()

        link.send(self.message)

        self.transfer_count +=1
        
class Receiver(Client):
    def __init__(self, work_dir, host_port, address, ntransfers,
                 nconnections, nsessions, nlinks):
        super(Receiver, self).__init__(work_dir, host_port, address, ntransfers,
                                       nconnections, nsessions, nlinks)

        self.transfers = list()
    
    def create_link(self, session):
        return session.receiver(self.address)

    def transfer_message(self, link):
        if link.available() == 0:
            return
        
        message = link.get()

        link.session.acknowledge()

        send_time = message.properties["send-time"]
        receive_time = time.time()
        
        self.transfers.append((message.id, send_time, receive_time))
        
        self.transfer_count +=1
        
        if self.transfer_count % 10000 == 0:
            prev_time = self.batch_start_time
            curr_time = time.time()
            rate = int(round(5000 / (curr_time - prev_time)))
            
            print("* {:10,} {:8,} transfers/s".format(self.transfer_count, rate))

            self.batch_start_time = curr_time
            
    def save(self):
        transfers_file = os.path.join(self.work_dir, "transfers.csv")
        
        with open(transfers_file, "w") as f:
            for result in self.transfers:
                f.write("{},{:.9f},{:.9f}\r\n".format(*result))

def main():
    work_dir, mode, operation, host_port, address = sys.argv[1:6]
    transfers = int(sys.argv[6])
    kwargs = dict()

    for arg in sys.argv[7:]:
        name, value = arg.split("=", 1)
        kwargs[name] = value

    if mode != "client":
        raise Exception("This implementation only supports client mode")

    connections = int(kwargs["connections"])
    sessions = int(kwargs["sessions"])
    links = int(kwargs["links"])
    
    if operation == "send":
        client = Sender(work_dir, host_port, address, transfers,
                        connections, sessions, links)
        
    if operation == "receive":
        client = Receiver(work_dir, host_port, address, transfers,
                          connections, sessions, links)

    client.run()
    client.save()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
