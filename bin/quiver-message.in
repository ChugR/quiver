#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

default = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default)

sys.path.insert(0, os.path.join(home, "python"))

import argparse
import proton
import tempfile

def main():
    description = "Generate an AMQP message and store it in a file"

    class Formatter(argparse.ArgumentDefaultsHelpFormatter,
                    argparse.RawDescriptionHelpFormatter):
        pass

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=Formatter)

    parser.add_argument("--bytes", metavar="COUNT",
                        help="Create body with COUNT bytes",
                        type=int, default=1000)
    parser.add_argument("-o", "--output", metavar="FILE",
                        help="Save the message to FILE")
    
    args = parser.parse_args()

    message = proton.Message()
    message.body = b"x" * args.bytes

    encoded_message = message.encode()

    if args.output is not None:
        with open(args.output, "w+b") as f:
            f.write(encoded_message)
    else:
        with tempfile.NamedTemporaryFile(delete=False) as f:
            f.write(encoded_message)

    print(f.name)
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
