#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import sys
import traceback

home = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home, "python"))

from plano import *

def run_test(sender_impl, receiver_impl, failures, peer_to_peer=False):
    options = [
        "--sender-impl", sender_impl,
        "--receiver-impl", receiver_impl,
        "--messages", "1k",
        "--verbose",
    ]

    if peer_to_peer:
        options.append("--peer-to-peer")

        summary = "{} -> {} ".format(sender_impl, receiver_impl)
    else:
        summary = "{} -> server -> {} ".format(sender_impl, receiver_impl)

    print("{:.<73} ".format(summary), end="")

    flush()

    command = "quiver-pair-test {} &> {}"
    options = " ".join(options)
    temp_file = make_temp_file()

    try:
        call(command, options, temp_file, shell=True)

        print("PASSED")
    except CalledProcessError as e:
        failures.append(str(e))

        print("FAILED")

        with open(temp_file, "r") as f:
            for line in f:
                print("> {}".format(line), end="")

    flush()

def main():
    set_message_threshold("warn")

    parser = argparse.ArgumentParser()

    parser.add_argument("--sender-impl", metavar="IMPL", default=None,
                        help="Test only sender IMPL")
    parser.add_argument("--receiver-impl", metavar="IMPL", default=None,
                        help="Test only receiver IMPL")
    parser.add_argument("--init-only", action="store_true",
                        help="Initialize and immediately exit")

    args = parser.parse_args()

    sender_impls = [
        "qpid-jms",
        "qpid-messaging-cpp",
        "qpid-messaging-python",
        "qpid-proton-python",
        "rhea",
        "vertx-proton",
    ]

    receiver_impls = [
        "qpid-jms",
        "qpid-messaging-cpp",
        "qpid-messaging-python",
        "qpid-proton-python",
        "rhea",
        "vertx-proton",
    ]

    server_receiver_impls = {
        "qpid-proton-python",
        "rhea",
    }

    if exists(join(home, "exec", "arrow-qpid-proton-cpp")):
        sender_impls.append("qpid-proton-cpp")
        receiver_impls.append("qpid-proton-cpp")
        server_receiver_impls.add("qpid-proton-cpp")

    if args.sender_impl is not None:
        if args.sender_impl not in sender_impls:
            parser.error("Unknown sender impl '{}'".format(args.sender_impl))

        sender_impls = [args.sender_impl]

    if args.receiver_impl is not None:
        if args.receiver_impl not in receiver_impls:
            parser.error("Unknown receiver impl '{}'".format(args.receiver_impl))

        receiver_impls = [args.receiver_impl]

    if args.init_only:
        return

    failures = list()

    print("# Testing client-server send and receive")

    for sender_impl in sorted(sender_impls):
        for receiver_impl in receiver_impls:
            run_test(sender_impl, receiver_impl, failures)

    print("# Testing peer-to-peer send and receive")

    for sender_impl in sorted(sender_impls):
        for receiver_impl in receiver_impls:
            if receiver_impl not in server_receiver_impls:
                continue

            run_test(sender_impl, receiver_impl, failures, peer_to_peer=True)

    print("# Test failures: {}".format(len(failures)))

    for failure in failures:
        print(failure) # Need summary

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
