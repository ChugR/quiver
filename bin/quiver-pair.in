#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import shlex
import sys
import traceback

home = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home, "python"))

from plano import *

def main():
    set_message_output(sys.stdout)

    parser = argparse.ArgumentParser()

    parser.add_argument("address", metavar="ADDRESS",
                        help="The location of a message queue")
    parser.add_argument("--impl", metavar="IMPL", default="qpid-proton-python")
    parser.add_argument("--sender-impl", metavar="IMPL", default=None)
    parser.add_argument("--sender-options", metavar="OPTIONS", default="")
    parser.add_argument("--receiver-impl", metavar="IMPL", default=None)
    parser.add_argument("--receiver-options", metavar="OPTIONS", default="")
    parser.add_argument("--init-only", action="store_true",
                        help="Initialize and immediately exit")

    args, unknown_args = parser.parse_known_args()

    sender_impl = args.sender_impl
    sender_options = shlex.split(args.sender_options)

    receiver_impl = args.receiver_impl
    receiver_options = shlex.split(args.receiver_options)

    if sender_impl is None:
        sender_impl = args.impl

    if receiver_impl is None:
        receiver_impl = args.impl

    sender_command = ["quiver-arrow", "send", args.address, "--impl", sender_impl]
    sender_command += sender_options
    sender_command += unknown_args

    receiver_command = ["quiver-arrow", "receive", args.address, "--impl", receiver_impl]
    receiver_command += receiver_options
    receiver_command += unknown_args

    exit_code = 0

    if args.init_only:
        return

    receiver = start_process(receiver_command)
    sender = start_process(sender_command)

    try:
        sender_exit_code = wait_for_process(sender)
        receiver_exit_code = wait_for_process(receiver)

        if (sender_exit_code, receiver_exit_code) != (0, 0):
            exit_code = 1
    except KeyboardInterrupt:
        pass
    except:
        traceback.print_exc()
        exit_code = 1
    finally:
        exit(exit_code)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
