#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import shlex
import sys
import traceback

home = os.path.normpath("@quiver_home@")
sys.path.insert(0, os.path.join(home, "python"))

from plano import *

def main():
    set_message_output(sys.stdout)

    parser = argparse.ArgumentParser()

    parser.add_argument("sender_impl", metavar="SENDER-IMPL")
    parser.add_argument("receiver_impl", metavar="RECEIVER-IMPL")
    parser.add_argument("--peer-to-peer", action="store_true")
    parser.add_argument("--sender-options", metavar="OPTIONS", default="")
    parser.add_argument("--sender-prelude", metavar="PRELUDE", default=None)
    parser.add_argument("--receiver-options", metavar="OPTIONS", default="")
    parser.add_argument("--receiver-prelude", metavar="PRELUDE", default=None)

    args, unknown_args = parser.parse_known_args()

    sender_options = shlex.split(args.sender_options)
    receiver_options = shlex.split(args.receiver_options)

    if args.peer_to_peer:
        receiver_options.append("--server")
        receiver_options.append("--passive")

    if "--impl" in unknown_args:
        parser.error("The --impl option isn't allowed here")

    port = random_port()

    server_command = "{}/exec/amqp-test-broker 127.0.0.1:{}".format(home, port)

    sender_command = [
        "quiver-arrow", "send",
        "//127.0.0.1:{}/q0".format(port),
        "--impl", args.sender_impl,
    ]

    receiver_command = [
        "quiver-arrow", "receive",
        "//127.0.0.1:{}/q0".format(port),
        "--impl", args.receiver_impl,
    ]

    if args.sender_prelude is not None:
        sender_command.insert(0, args.sender_prelude)

    if args.receiver_prelude is not None:
        receiver_command.insert(0, args.receiver_prelude)

    sender_command += sender_options
    sender_command += unknown_args
    receiver_command += receiver_options
    receiver_command += unknown_args

    exit_code = 0
    server = None

    try:
        if args.peer_to_peer:
            receiver = start_process(receiver_command)
            sender = start_process(sender_command)
        else:
            server = start_process(server_command)
            sender = start_process(sender_command)
            receiver = start_process(receiver_command)

        sender_exit_code = wait_for_process(sender)
        receiver_exit_code = wait_for_process(receiver)

        if (sender_exit_code, receiver_exit_code) != (0, 0):
            exit_code = 1
    except KeyboardInterrupt:
        pass
    except:
        traceback.print_exc()
        exit_code = 1
    finally:
        if server is not None:
            stop_process(server)

        exit(exit_code)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
