#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import os
import sys

default = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default)

sys.path.insert(0, os.path.join(home, "python"))

import collections
import time

from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

class BaseHandler(MessagingHandler):
    def __init__(self, work_dir, host_port, address, transfers):
        super(BaseHandler, self).__init__()

        self.work_dir = work_dir
        self.host_port = host_port
        self.address = address
        self.transfers = transfers
        
        self.start_time = None
        self.batch_start_time = None
        self.transfer_count = 0
        self.stopping = False

    def on_start(self, event):
        self.start_time = time.time()
        self.batch_start_time = self.start_time
        
    def stop(self):
        self.stopping = True

    def save(self):
        pass

class Client(BaseHandler):
    def __init__(self, work_dir, host_port, address, transfers):
        super(Client, self).__init__(work_dir, host_port, address, transfers)

        self.connection = None

    def on_start(self, event):
        super(Client, self).on_start(event)
        
        self.connection = event.container.connect \
            (self.host_port, allowed_mechs=b"ANONYMOUS")

        self.create_link(event)

    def create_link(self, session, name):
        raise NotImplementedError()
            
    def stop(self):
        super(Client, self).stop()
        
        self.connection.close()

class Server(BaseHandler):
    def __init__(self, work_dir, host_port, address, transfers):
        super(Server, self).__init__(work_dir, host_port, address, transfers)
        
        self.acceptor = None

    def on_start(self, event):
        super(Server, self).on_start(event)

        self.acceptor = event.container.listen(self.host_port)

    def stop(self):
        super(Server, self).stop()
        
        self.acceptor.close()
                 
class Sender(BaseHandler):
    def __init__(self, work_dir, host_port, address, transfers):
        super(Sender, self).__init__(work_dir, host_port, address, transfers)

        self.message = None

    def on_sendable(self, event):
        if self.stopping:
            return

        while event.sender.credit > 0:
            self.message.id = self.transfer_count + 1
            self.message.properties["send-time"] = time.time()

            event.sender.send(self.message)

            self.transfer_count += 1

            if self.transfer_count == self.transfers:
                self.stop()
            
class Receiver(BaseHandler):
    def __init__(self, work_dir, host_port, address, transfers):
        super(Receiver, self).__init__(work_dir, host_port, address,
                                             transfers)

        self.transfer_records = list()
    
    def on_message(self, event):
        if self.stopping:
            return
        
        message = event.message
        send_time = message.properties["send-time"]
        receive_time = time.time()
        
        self.transfer_records.append((message.id, send_time, receive_time))
        self.transfer_count += 1

        if self.transfer_count % 10000 == 0:
            prev_time = self.batch_start_time
            curr_time = time.time()
            rate = int(round(10000 / (curr_time - prev_time)))
            
            print("* {:10,} {:8,} transfers/s".format(self.transfer_count, rate))

            self.batch_start_time = curr_time
            
        if self.transfer_count == self.transfers:
            self.stop()

    def save(self):
        transfers_file = os.path.join(self.work_dir, "transfers.csv")
        
        with open(transfers_file, "w") as f:
            for record in self.transfer_records:
                f.write("{},{:.9f},{:.9f}\r\n".format(*record))
                
class ClientSender(Client, Sender):
    def create_link(self, event):
        return event.container.create_sender(self.connection, self.address)

class ClientReceiver(Client, Receiver):
    def create_link(self, event):
        return event.container.create_receiver(self.connection, self.address)

class ServerSender(Server, Sender):
    pass

class ServerReceiver(Server, Receiver):
    pass

handler_classes = {
    "client-send": ClientSender,
    "client-receive": ClientReceiver,
    "server-send": ServerSender,
    "server-receive": ServerReceiver,
}

def main():
    work_dir, mode, operation, host_port, address = sys.argv[1:6]
    transfers = int(sys.argv[6])
    kwargs = dict()

    for arg in sys.argv[7:]:
        name, value = arg.split("=", 1)
        kwargs[name] = value

    handler_key = "{}-{}".format(mode, operation)
    handler_class = handler_classes[handler_key]
    handler = handler_class(work_dir, host_port, address, transfers)
    
    if operation == "send":
        handler.message = Message()
        
        with open(kwargs["message"], "rb") as f:
            handler.message.decode(f.read())

        handler.message.properties = dict()
        
    container = Container(handler)
    container.run()

    handler.save()
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
