#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import os
import sys

default = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default)

sys.path.insert(0, os.path.join(home, "python"))

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
from subprocess import check_call

def main():
    description = "A tool for testing the performance of " \
                  "AMQP messaging APIs"

    epilog = "operations:\n" \
             "  send                 Send messages\n" \
             "  receive              Receive messages\n" \
             "\n" \
             "implementations:\n" \
             "  proton-python\n" \
             "\n" \
             "typical usage:\n" \
             "  $ qpidd --auth no &\n" \
             "  $ qpid-config add queue q0\n" \
             "  $ quiver receive q0 &\n" \
             "  $ quiver send q0\n" \
             "\n" \

    parser = ArgumentParser(description=description, epilog=epilog,
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("operation", metavar="OPERATION",
                        choices=["send", "receive"])
    parser.add_argument("address", metavar="ADDRESS")
    parser.add_argument("--impl", metavar="IMPLEMENTATION",
                        help="Use IMPL", default="proton-python")
    parser.add_argument("-c", "--connections", metavar="COUNT",
                        help="Use COUNT connections", default=1, type=int)
    parser.add_argument("-s", "--sessions", metavar="COUNT",
                        help="Use COUNT sessions", default=1, type=int)
    parser.add_argument("-l", "--links", metavar="COUNT",
                        help="Use COUNT links", default=1, type=int)
    parser.add_argument("-m", "--messages", metavar="COUNT",
                        help="Send or receive COUNT messages",
                        default=1000, type=int)
    parser.add_argument("-b", "--bytes", metavar="COUNT",
                        help="Send or receive COUNT bytes",
                        default=100000, type=int)

    args = parser.parse_args()

    address = args.address

    if "/" not in address:
        address = "localhost:5672/{}".format(address)

    connections = args.connections
    sessions = max(args.sessions, connections)
    links = max(args.links, sessions)
    messages = max(args.messages, links)
    bytes = max(args.bytes, messages)
    
    command_dir = os.path.normpath("{}/../../libexec/quiver".format(home))
    command = (
        "{}/quiver-{}".format(command_dir, args.impl),
        args.operation,
        address,
        str(connections),
        str(sessions),
        str(links),
        str(messages),
        str(bytes),
    )

    print("Calling '{}'".format(" ".join(command)))
    
    check_call(command)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
