#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import argparse
import os
import sys
import traceback

default_home_dir = os.path.normpath("@quiver_home@")
home_dir = os.environ.get("QUIVER_HOME", default_home_dir)

sys.path.insert(0, os.path.join(home_dir, "python"))

from quiver import *

impls_by_name = {
    "activemq-jms": "activemq-jms",
    "activemq-artemis-jms": "activemq-artemis-jms",
    "artemis-jms": "activemq-artemis-jms",
    "jms": "qpid-jms",
    "python": "qpid-proton-python",
    "qpid-jms": "qpid-jms",
    "qpid-messaging-cpp": "qpid-messaging-cpp",
    "qpid-messaging-python": "qpid-messaging-python",
    "qpid-proton-python": "qpid-proton-python",
}

description = "Test the performance of messaging clients and servers"

epilog = "operations:\n" \
         "  send                  Send messages\n" \
         "  receive               Receive messages\n" \
         "\n" \
         "addresses:\n" \
         "  [//DOMAIN/]PATH                 The default domain is 'localhost'\n" \
         "  //example.net/jobs\n" \
         "  //10.0.0.10:5672/jobs/alpha\n" \
         "  //localhost/q0\n" \
         "  q0\n" \
         "\n" \
         "implementations:\n" \
         "  activemq-artemis-jms            Client mode only; requires Artemis server\n" \
         "  activemq-jms                    Client mode only; ActiveMQ or Artemis server\n" \
         "  qpid-jms (jms)                  Client mode only\n" \
         "  qpid-messaging-cpp              Client mode only\n" \
         "  qpid-messaging-python           Client mode only\n" \
         "  qpid-proton-python (python)\n" \
         "\n" \
         "example usage:\n" \
         "  $ qdrouterd &                   # Start an AMQP server\n" \
         "  $ quiver q0 receive &           # Start receiving\n" \
         "  $ quiver q0 send                # Start sending\n" \
         "\n"

class Formatter(argparse.ArgumentDefaultsHelpFormatter,
                argparse.RawDescriptionHelpFormatter):
    pass

parser = argparse.ArgumentParser(description=description,
                                 epilog=epilog,
                                 formatter_class=Formatter)

parser.add_argument("address", metavar="ADDRESS",
                    help="The location of an AMQP node")
parser.add_argument("operation", metavar="OPERATION",
                    choices=["send", "receive"],
                    help="Either 'send' or 'receive'")
parser.add_argument("-n", "--messages", metavar="COUNT",
                    help="Send or receive COUNT messages",
                    default=1000000, type=int)
parser.add_argument("-v", "--verbose", action="store_true",
                    help="Periodically print status to the console")
parser.add_argument("--impl", metavar="NAME",
                    help="Use NAME implementation",
                    default="qpid-proton-python")
parser.add_argument("--bytes", metavar="COUNT",
                    help="Send message bodies containing COUNT bytes",
                    default=100, type=int)
parser.add_argument("--credit", metavar="COUNT",
                    help="Sustain credit for COUNT incoming transfers",
                    default=1000, type=int)
parser.add_argument("--timeout", metavar="SECONDS",
                    help="Fail after SECONDS without transfers",
                    default=10, type=int)
parser.add_argument("--server", action="store_true",
                    help="Operate in server mode")
parser.add_argument("--output", metavar="DIRECTORY",
                    help="Save output files to DIRECTORY")
parser.add_argument("--quiet", action="store_true",
                    help="Print nothing to the console")
    
def main():
    args = parser.parse_args()

    try:
        impl = impls_by_name[args.impl]
    except KeyError:
        parser.error("Impl '{}' is unknown".format(args.impl))
    
    mode = "server" if args.server else "client"
    
    command = QuiverCommand(home_dir, args.output, impl, mode, args.address,
                            args.operation, args.messages, args.bytes,
                            args.credit, args.timeout)

    command.verbose = args.verbose
    command.quiet = args.quiet
    
    command.init()
    command.check()
    command.run()

if __name__ == "__main__":
    try:
        main()
    except QuiverError as e:
        exit("quiver: error: {}".format(e))
    except KeyboardInterrupt:
        pass
