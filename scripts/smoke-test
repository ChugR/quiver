#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

set -eu

if (( $# == 1 )); then
    MESSAGES=$1
else
    MESSAGES=1000
fi

test_failures=0

function random_port {
    echo $(python -S -c "import random; print random.randrange(49152, 65535)")
}

function random_address {
    local port=$(random_port)
    # XXX Using 127.0.0.1 here to avoid connection failures
    echo //127.0.0.1:${port}/q0
}

function test_server_mode {
    local sender_impl=$1
    local receiver_impl=$2
    local address=$(random_address)
    local sender_pid=
    local receiver_pid=
    local failures=0

    echo -n "Testing server mode, sender ${sender_impl}, receiver ${receiver_impl} ... "
    
    quiver $address receive -n $MESSAGES --quiet --impl $receiver_impl --server &
    receiver_pid=$!
    quiver $address send -n $MESSAGES --quiet --impl $sender_impl &
    sender_pid=$!

    wait $sender_pid || let "failures+=1"
    wait $receiver_pid || let "failures+=1"

    # XXX ERROR:root:amqp:connection:framing-error: AMQP header mismatch: Unknown protocol ['X\x1b
    
    # quiver $address send -n $MESSAGES --quiet --impl $sender_impl --server &
    # sender_pid=$!
    # quiver $address receive -n $MESSAGES --quiet --impl $receiver_impl &
    # receiver_pid=$!

    # wait $sender_pid || let "failures+=1"
    # wait $receiver_pid || let "failures+=1"

    if (( $failures == 0 )); then 
        echo PASSED
    else
        let "test_failures+=1"
        echo FAILED
    fi
}

function test_client_mode {
    local sender_impl=$1
    local receiver_impl=$2
    local port=$(random_port)
    # XXX Using 127.0.0.1 here to avoid connection failures
    local address=//127.0.0.1:${port}/q0
    local failures=0

    echo -n "Testing client mode, sender ${sender_impl}, receiver ${receiver_impl} ... "

    # XXX Using 127.0.0.1 here to avoid connection failures
    scripts/amqp-test-broker --host 127.0.0.1 --port $port 2> /dev/null &
    local broker_pid=$!

    quiver $address receive -n $MESSAGES --quiet --impl $receiver_impl &
    local receiver_pid=$!
    
    quiver $address send -n $MESSAGES --quiet --impl $sender_impl &
    local sender_pid=$!

    wait $sender_pid || let "failures+=1"
    wait $receiver_pid || let "failures+=1"

    kill $broker_pid
    wait $broker_pid 2> /dev/null || :

    if (( $failures == 0 )); then 
        echo PASSED
    else
        let "test_failures+=1"
        echo FAILED
    fi
}

test_server_mode qpid-jms qpid-proton-python   
# XXX Connect failed to amqp:tcp:127.0.0.1:55536: Reconnect disabled
#test_server_mode qpid-messaging-cpp qpid-proton-python
# XXX _qpid_messaging.NotFound: No such target : q0
#test_server_mode qpid-messaging-python qpid-proton-python
test_server_mode qpid-proton-python qpid-proton-python   

# XXX javax.jms.JMSException: Failed to create connection to: amqp://localhost:65407
# Issue is use of 'localhost'; 127.0.0.1 works
test_client_mode qpid-jms qpid-jms
test_client_mode qpid-jms qpid-messaging-cpp
test_client_mode qpid-jms qpid-messaging-python
test_client_mode qpid-jms qpid-proton-python
test_client_mode qpid-messaging-cpp qpid-jms
test_client_mode qpid-messaging-cpp qpid-messaging-cpp
test_client_mode qpid-messaging-cpp qpid-messaging-python
test_client_mode qpid-messaging-cpp qpid-proton-python
test_client_mode qpid-messaging-python qpid-jms
test_client_mode qpid-messaging-python qpid-messaging-cpp
test_client_mode qpid-messaging-python qpid-messaging-python
test_client_mode qpid-messaging-python qpid-proton-python
test_client_mode qpid-proton-python qpid-jms
test_client_mode qpid-proton-python qpid-messaging-cpp
test_client_mode qpid-proton-python qpid-messaging-python
test_client_mode qpid-proton-python qpid-proton-python

echo "Test failures: ${test_failures}"
