#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

import time

from plano import *

amqp_servers = (
#    "activemq",
    "artemis",
#    "qdrouterd",
#    "qpidd",
)

amqp_arrows = (
    "qpid-jms",
    "qpid-messaging-cpp",
#    "qpid-messaging-python",
#    "qpid-proton-cpp",
#    "qpid-proton-python",
#    "rhea",
#    "vertx-proton",
)

core_arrows = (
    "activemq-artemis-jms",
)

core_servers = (
    "artemis",
)

openwire_arrows = (
    "activemq-jms",
)

openwire_servers = (
    "activemq",
    "artemis",
)

def run_test(server, arrow, output_dir, args):
    if server == "activemq" and which("activemq") is None:
        return

    if server == "artemis" and which("artemis") is None:
        return

    notice("Testing server '{}' with client '{}'", server, arrow)

    test_dir = join(output_dir, "{}--{}".format(server, arrow))
    data_dir = join(test_dir, "data")
    output_file = join(test_dir, "output.txt")
    result_file = join(test_dir, "result.txt")

    make_dir(test_dir)

    server = start_process("quiver-server --impl {} --verbose q0", server)

    sleep(10) # XXX Ugh
    
    try:
        call("quiver //localhost/q0 --impl {} {} --output {} &> {}",
             arrow, args, data_dir, output_file, shell=True)
        write(result_file, "PASSED")
    except CalledProcessError as e:
        error(e)
        write(result_file, "FAILED: {}".format(e))
    finally:
        stop_process(server)
        sleep(5) # XXX

def main():
    if "--impl" in ARGS:
        exit("The --impl argument is not allowed here")

    if "--output" in ARGS:
        exit("The --output argument is not allowed here")

    script = file_name(ARGS[0])
    timestamp = time.strftime('%Y-%m-%d', time.localtime())
    output_dir = "{}-{}".format(script, timestamp)

    remove(output_dir)
    make_dir(output_dir)

    args = " ".join(ARGS[1:])

    for server in amqp_servers:
        for arrow in amqp_arrows:
            run_test(server, arrow, output_dir, args)

#    for server in core_servers:
#        for arrow in core_arrows:
#            run_test(server, arrow, output_dir, args)

#    for server in openwire_servers:
#        for arrow in openwire_arrows:
#            run_test(server, arrow, output_dir, args)

    print(output_dir)

    for name in (list_dir(output_dir)):
        print("  {}".format(name))

try:
    main()
except KeyboardInterrupt:
    pass
